{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T20:15:26.993Z",
    "end": "2025-09-06T20:15:27.119Z",
    "duration": 126,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3689d520-005f-4a6a-8c3a-3cad7330bc9d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b6eaf370-d36e-4627-b995-670f230b422a",
          "title": "GraphQL Transfer Mutations",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/transferGraphQL.test.js",
          "file": "/test/graphql/controller/transferGraphQL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Transfer Mutations\"",
              "fullTitle": "GraphQL Transfer Mutations \"before all\" hook in \"GraphQL Transfer Mutations\"",
              "timedOut": false,
              "duration": 52,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginMutation = {\n  query: `\n  mutation LoginUser($username: String!, $password: String!) {\n    loginUser(username: $username, password: $password) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`,\n  variables: {\n    username: \"julio\",\n    password: \"123456\"\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(loginMutation);\nif (res.body.errors) {\n  console.error('Erro ao fazer login:', res.body.errors);\n  throw new Error('Falha no login, verifique os dados de login ou o userService.js');\n}\ntoken = res.body.data.loginUser.token;",
              "err": {},
              "uuid": "6b0e5498-0fb0-4543-a831-60690590da0c",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remetente ou destinatário inexistentes retorna erro",
              "fullTitle": "GraphQL Transfer Mutations Remetente ou destinatário inexistentes retorna erro",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"isabelle\", value: 100) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Usuário remetente ou destinatário não encontrado');",
              "err": {},
              "uuid": "312730dc-91a5-49d4-88ec-e45b2b77fd97",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transferência com sucesso",
              "fullTitle": "GraphQL Transfer Mutations Transferência com sucesso",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"priscila\", value: 100) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.data.createTransfer).to.deep.equal({\n  from: 'julio',\n  to: 'priscila',\n  value: 100\n});",
              "err": {},
              "uuid": "673ed990-0367-4258-90fa-9bdd5f22abb3",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sem token de autenticação retorna erro",
              "fullTitle": "GraphQL Transfer Mutations Sem token de autenticação retorna erro",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"priscila\", value: 50) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Autenticação obrigatória');",
              "err": {},
              "uuid": "e25bdbc4-9d5e-4d15-af98-6ef568445bf7",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao tentar transferir valor maior que o saldo disponível",
              "fullTitle": "GraphQL Transfer Mutations Deve retornar erro ao tentar transferir valor maior que o saldo disponível",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n      mutation {\n        createTransfer(from: \"julio\", to: \"priscila\", value: 10000.01) {\n          from\n          to\n          value\n        }\n      }\n    `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors).to.be.an('array');\nexpect(res.body.errors[0].message).to.equal('Saldo insuficiente');",
              "err": {},
              "uuid": "41b16d0f-2db3-48f9-a331-dfb275230bca",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve impedir transferência acima de R$ 5.000,00 para usuários que não são favorecidos",
              "fullTitle": "GraphQL Transfer Mutations Deve impedir transferência acima de R$ 5.000,00 para usuários que não são favorecidos",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n      mutation {\n        createTransfer(from: \"julio\", to: \"renata\", value: 5000.01) {\n          from\n          to\n          value\n        }\n      }\n    `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors).to.be.an('array');\nexpect(res.body.errors[0].message).to.equal(\n  'Transferência acima de R$ 5.000,00 só para favorecidos'\n);",
              "err": {},
              "uuid": "cdf0ffb6-f9af-4a5c-9fd5-23da095b9cd1",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve permitir transferência acima de R$ 5.000,00 para favorecidos",
              "fullTitle": "GraphQL Transfer Mutations Deve permitir transferência acima de R$ 5.000,00 para favorecidos",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n      mutation {\n        createTransfer(from: \"julio\", to: \"priscila\", value: 5000.01) {\n          from\n          to\n          value\n        }\n      }\n    `\n};\nconst response = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(response.status).to.equal(200);\nexpect(response.body.data.createTransfer).to.have.property('from', 'julio');\nexpect(response.body.data.createTransfer).to.have.property('to', 'priscila');\nexpect(response.body.data.createTransfer).to.have.property('value', 5000.01);",
              "err": {},
              "uuid": "be4dffff-a30c-4900-af4f-07c749906342",
              "parentUUID": "b6eaf370-d36e-4627-b995-670f230b422a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "312730dc-91a5-49d4-88ec-e45b2b77fd97",
            "673ed990-0367-4258-90fa-9bdd5f22abb3",
            "e25bdbc4-9d5e-4d15-af98-6ef568445bf7",
            "41b16d0f-2db3-48f9-a331-dfb275230bca",
            "cdf0ffb6-f9af-4a5c-9fd5-23da095b9cd1",
            "be4dffff-a30c-4900-af4f-07c749906342"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0edc55e7-fe5b-49f2-a67c-3aded237133f",
          "title": "GraphQL User Mutations & Queries",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
          "file": "/test/graphql/controller/userGraphQL.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e914dd80-4b51-4571-b2e3-81ca76b825b9",
              "title": "registerUser",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
              "file": "/test/graphql/controller/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo usuario já existente recebo erro",
                  "fullTitle": "GraphQL User Mutations & Queries registerUser Quando informo usuario já existente recebo erro",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation RegisterUser($username: String!, $password: String!, $favorecidos: [String!]) {\n      registerUser(username: $username, password: $password, favorecidos: $favorecidos) {\n        username\n      }\n    }\n  `,\n  variables: {\n    username: 'julio',\n    password: '123456',\n    favorecidos: ['camila']\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.errors[0].message).to.equal('Usuário já existe');",
                  "err": {},
                  "uuid": "8e1bc1a1-b41b-442d-a6ae-460d18340cf6",
                  "parentUUID": "e914dd80-4b51-4571-b2e3-81ca76b825b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e1bc1a1-b41b-442d-a6ae-460d18340cf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f89d61f8-abf7-4296-8c21-6882cf0e094a",
              "title": "loginUser",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
              "file": "/test/graphql/controller/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo login inexistente recebo erro",
                  "fullTitle": "GraphQL User Mutations & Queries loginUser Quando informo login inexistente recebo erro",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n      }\n    }\n  `,\n  variables: {\n    username: 'jansen',\n    password: '126'\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.errors[0].message).to.equal('Usuário não encontrado');",
                  "err": {},
                  "uuid": "01105bb8-21c1-423a-ba13-cf0204ef3cf8",
                  "parentUUID": "f89d61f8-abf7-4296-8c21-6882cf0e094a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válido recebo token",
                  "fullTitle": "GraphQL User Mutations & Queries loginUser Quando informo login válido recebo token",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n        user {\n          username\n        }\n      }\n    }\n  `,\n  variables: {\n    username: 'julio',\n    password: '123456'\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.data.loginUser.token).to.exist;\ntoken = res.body.data.loginUser.token;",
                  "err": {},
                  "uuid": "1f3957e6-a8e9-4533-b4bf-c51e8c8c885b",
                  "parentUUID": "f89d61f8-abf7-4296-8c21-6882cf0e094a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01105bb8-21c1-423a-ba13-cf0204ef3cf8",
                "1f3957e6-a8e9-4533-b4bf-c51e8c8c885b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8bca35fb-6687-4471-b7fa-f90aefc14d3d",
              "title": "users Query",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
              "file": "/test/graphql/controller/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios recebo lista",
                  "fullTitle": "GraphQL User Mutations & Queries users Query Quando solicito os dados de usuarios recebo lista",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const query = {\n  query: `\n    query {\n      users {\n        username\n        saldo\n        favorecidos\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(query);\nexpect(res.body.data.users).to.be.an('array');\nexpect(res.body.data.users[0]).to.have.property('username');",
                  "err": {},
                  "uuid": "eb37df35-0c85-486d-995b-6bb590cfa7db",
                  "parentUUID": "8bca35fb-6687-4471-b7fa-f90aefc14d3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb37df35-0c85-486d-995b-6bb590cfa7db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-graphql",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report-graphql",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}