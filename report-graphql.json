{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T19:02:50.305Z",
    "end": "2025-09-06T19:02:50.435Z",
    "duration": 130,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "90b0969b-8bf0-4ed9-b306-3c9d61cb6b95",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d09b37fd-3af0-4c24-a8af-6491f5149297",
          "title": "GraphQL Transfer Mutations",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/transferGraphQL.test.js",
          "file": "/test/graphql/controller/transferGraphQL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Transfer Mutations\"",
              "fullTitle": "GraphQL Transfer Mutations \"before all\" hook in \"GraphQL Transfer Mutations\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginMutation = {\n  query: `\n  mutation LoginUser($username: String!, $password: String!) {\n    loginUser(username: $username, password: $password) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`,\n  variables: {\n    username: \"julio\",\n    password: \"123456\"\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(loginMutation);\nif (res.body.errors) {\n  console.error('Erro ao fazer login:', res.body.errors);\n  throw new Error('Falha no login, verifique os dados de login ou o userService.js');\n}\ntoken = res.body.data.loginUser.token;",
              "err": {},
              "uuid": "ad357349-84d9-4abd-9162-08e124bade24",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remetente ou destinatário inexistentes retorna erro",
              "fullTitle": "GraphQL Transfer Mutations Remetente ou destinatário inexistentes retorna erro",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"isabelle\", value: 100) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Usuário remetente ou destinatário não encontrado');",
              "err": {},
              "uuid": "7fcbaf6f-50ba-44c1-bde9-2d3f894018f6",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transferência com sucesso",
              "fullTitle": "GraphQL Transfer Mutations Transferência com sucesso",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"priscila\", value: 100) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.data.createTransfer).to.deep.equal({\n  from: 'julio',\n  to: 'priscila',\n  value: 100\n});",
              "err": {},
              "uuid": "0c9992a7-4392-4796-8402-85da90dbc9d5",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sem token de autenticação retorna erro",
              "fullTitle": "GraphQL Transfer Mutations Sem token de autenticação retorna erro",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"priscila\", value: 50) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Autenticação obrigatória');",
              "err": {},
              "uuid": "12e44be4-e2b4-4924-a6af-9c8e48f45755",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao tentar transferir valor maior que o saldo disponível",
              "fullTitle": "GraphQL Transfer Mutations Deve retornar erro ao tentar transferir valor maior que o saldo disponível",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n      mutation {\n        createTransfer(from: \"julio\", to: \"priscila\", value: 10000.01) {\n          from\n          to\n          value\n        }\n      }\n    `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors).to.be.an('array');\nexpect(res.body.errors[0].message).to.equal('Saldo insuficiente');",
              "err": {},
              "uuid": "1abe6669-b07e-40b8-ba06-695e4a7750c7",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve impedir transferência acima de R$ 5.000,00 para usuários que não são favorecidos",
              "fullTitle": "GraphQL Transfer Mutations Deve impedir transferência acima de R$ 5.000,00 para usuários que não são favorecidos",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n      mutation {\n        createTransfer(from: \"julio\", to: \"renata\", value: 5000.01) {\n          from\n          to\n          value\n        }\n      }\n    `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors).to.be.an('array');\nexpect(res.body.errors[0].message).to.equal(\n  'Transferência acima de R$ 5.000,00 só para favorecidos'\n);",
              "err": {},
              "uuid": "eea072c0-0244-4144-905f-992eb1929add",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve permitir transferência acima de R$ 5.000,00 para favorecidos",
              "fullTitle": "GraphQL Transfer Mutations Deve permitir transferência acima de R$ 5.000,00 para favorecidos",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n      mutation {\n        createTransfer(from: \"julio\", to: \"priscila\", value: 5000.01) {\n          from\n          to\n          value\n        }\n      }\n    `\n};\nconst response = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(response.status).to.equal(200);\nexpect(response.body.data.createTransfer).to.have.property('from', 'julio');\nexpect(response.body.data.createTransfer).to.have.property('to', 'priscila');\nexpect(response.body.data.createTransfer).to.have.property('value', 5000.01);",
              "err": {},
              "uuid": "213fac00-8fd1-4258-a12c-cd06cf16dfc0",
              "parentUUID": "d09b37fd-3af0-4c24-a8af-6491f5149297",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fcbaf6f-50ba-44c1-bde9-2d3f894018f6",
            "0c9992a7-4392-4796-8402-85da90dbc9d5",
            "12e44be4-e2b4-4924-a6af-9c8e48f45755",
            "1abe6669-b07e-40b8-ba06-695e4a7750c7",
            "eea072c0-0244-4144-905f-992eb1929add",
            "213fac00-8fd1-4258-a12c-cd06cf16dfc0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3055bf24-7c79-46d2-9073-1796f49d9c51",
          "title": "GraphQL User Mutations & Queries",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
          "file": "/test/graphql/controller/userGraphQL.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c114e59b-5ccc-4939-be0a-87d5a0973f58",
              "title": "registerUser",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
              "file": "/test/graphql/controller/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo usuario já existente recebo erro",
                  "fullTitle": "GraphQL User Mutations & Queries registerUser Quando informo usuario já existente recebo erro",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation RegisterUser($username: String!, $password: String!, $favorecidos: [String!]) {\n      registerUser(username: $username, password: $password, favorecidos: $favorecidos) {\n        username\n      }\n    }\n  `,\n  variables: {\n    username: 'julio',\n    password: '123456',\n    favorecidos: ['camila']\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.errors[0].message).to.equal('Usuário já existe');",
                  "err": {},
                  "uuid": "c21ab988-47c0-41bb-95af-fda984c15086",
                  "parentUUID": "c114e59b-5ccc-4939-be0a-87d5a0973f58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c21ab988-47c0-41bb-95af-fda984c15086"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "352e415e-76ae-4818-b414-c5874ea57dee",
              "title": "loginUser",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
              "file": "/test/graphql/controller/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo login inexistente recebo erro",
                  "fullTitle": "GraphQL User Mutations & Queries loginUser Quando informo login inexistente recebo erro",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n      }\n    }\n  `,\n  variables: {\n    username: 'jansen',\n    password: '126'\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.errors[0].message).to.equal('Usuário não encontrado');",
                  "err": {},
                  "uuid": "4c7de3ec-f48a-4523-a1ea-76b3bc80fd5d",
                  "parentUUID": "352e415e-76ae-4818-b414-c5874ea57dee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válido recebo token",
                  "fullTitle": "GraphQL User Mutations & Queries loginUser Quando informo login válido recebo token",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n        user {\n          username\n        }\n      }\n    }\n  `,\n  variables: {\n    username: 'julio',\n    password: '123456'\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.data.loginUser.token).to.exist;\ntoken = res.body.data.loginUser.token;",
                  "err": {},
                  "uuid": "28c0f6eb-afd8-4a5a-8bff-9d03da06423c",
                  "parentUUID": "352e415e-76ae-4818-b414-c5874ea57dee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c7de3ec-f48a-4523-a1ea-76b3bc80fd5d",
                "28c0f6eb-afd8-4a5a-8bff-9d03da06423c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f471860b-f22d-4466-b208-8e9e5b104198",
              "title": "users Query",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/graphql/controller/userGraphQL.test.js",
              "file": "/test/graphql/controller/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios recebo lista",
                  "fullTitle": "GraphQL User Mutations & Queries users Query Quando solicito os dados de usuarios recebo lista",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const query = {\n  query: `\n    query {\n      users {\n        username\n        saldo\n        favorecidos\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(query);\nexpect(res.body.data.users).to.be.an('array');\nexpect(res.body.data.users[0]).to.have.property('username');",
                  "err": {},
                  "uuid": "c962d451-3522-42f9-84f0-383069c26eb7",
                  "parentUUID": "f471860b-f22d-4466-b208-8e9e5b104198",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c962d451-3522-42f9-84f0-383069c26eb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-graphql",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report-graphql",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}