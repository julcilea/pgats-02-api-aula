{
  "stats": {
    "suites": 5,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-24T19:46:33.093Z",
    "end": "2025-08-24T19:46:33.196Z",
    "duration": 103,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "07db6a5f-3179-4d74-9667-ae0a55993512",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4f745af-0889-4301-b2d7-868183efcebf",
          "title": "GraphQL Transfer Mutations",
          "fullFile": "/home/julcilea/Documentos/PGATS/pgats-02-api-aula/test/external-graphql/transferGraphQL.test.js",
          "file": "/test/external-graphql/transferGraphQL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Transfer Mutations\"",
              "fullTitle": "GraphQL Transfer Mutations \"before all\" hook in \"GraphQL Transfer Mutations\"",
              "timedOut": false,
              "duration": 47,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginMutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n        user {\n          username\n        }\n      }\n    }\n  `,\n  variables: {\n    username: \"julio\",\n    password: \"123456\"\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(loginMutation);\n  if (res.body.errors) {\n      console.error('Erro ao fazer login:', res.body.errors);\n      throw new Error('Falha no login, verifique os dados de login ou o userService.js');\n  }\n  token = res.body.data.loginUser.token;",
              "err": {},
              "uuid": "a62b5174-1fb0-4ab0-b4c7-dd4e73da3e22",
              "parentUUID": "a4f745af-0889-4301-b2d7-868183efcebf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remetente ou destinatário inexistentes retorna erro",
              "fullTitle": "GraphQL Transfer Mutations Remetente ou destinatário inexistentes retorna erro",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"isabelle\", value: 100) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Usuário remetente ou destinatário não encontrado');",
              "err": {},
              "uuid": "193adae7-d84c-464f-8131-400a003ba44c",
              "parentUUID": "a4f745af-0889-4301-b2d7-868183efcebf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Transferência com sucesso",
              "fullTitle": "GraphQL Transfer Mutations Transferência com sucesso",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"priscila\", value: 100) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.data.createTransfer).to.deep.equal({\n  from: 'julio',\n  to: 'priscila',\n  value: 100\n});",
              "err": {},
              "uuid": "6a5f89e7-f3aa-4cb4-adbf-f93ac272961a",
              "parentUUID": "a4f745af-0889-4301-b2d7-868183efcebf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sem token de autenticação retorna erro",
              "fullTitle": "GraphQL Transfer Mutations Sem token de autenticação retorna erro",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createTransferMutation = {\n  query: `\n    mutation {\n      createTransfer(from: \"julio\", to: \"priscila\", value: 50) {\n        from\n        to\n        value\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(createTransferMutation);\nexpect(res.status).to.equal(200);\nexpect(res.body.errors[0].message).to.equal('Autenticação obrigatória');",
              "err": {},
              "uuid": "446e001f-f3b0-46ce-bc86-8258284aec1a",
              "parentUUID": "a4f745af-0889-4301-b2d7-868183efcebf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "193adae7-d84c-464f-8131-400a003ba44c",
            "6a5f89e7-f3aa-4cb4-adbf-f93ac272961a",
            "446e001f-f3b0-46ce-bc86-8258284aec1a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0dd4cf73-f568-4657-82f6-890d6a7e0bf7",
          "title": "GraphQL User Mutations & Queries",
          "fullFile": "/home/julcilea/Documentos/PGATS/pgats-02-api-aula/test/external-graphql/userGraphQL.test.js",
          "file": "/test/external-graphql/userGraphQL.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9b794a7e-c1e5-4769-b96a-c7797736c6ad",
              "title": "registerUser",
              "fullFile": "/home/julcilea/Documentos/PGATS/pgats-02-api-aula/test/external-graphql/userGraphQL.test.js",
              "file": "/test/external-graphql/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo usuario já existente recebo erro",
                  "fullTitle": "GraphQL User Mutations & Queries registerUser Quando informo usuario já existente recebo erro",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation RegisterUser($username: String!, $password: String!, $favorecidos: [String!]) {\n      registerUser(username: $username, password: $password, favorecidos: $favorecidos) {\n        username\n      }\n    }\n  `,\n  variables: {\n    username: 'julio',\n    password: '123456',\n    favorecidos: ['camila']\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.errors[0].message).to.equal('Usuário já existe');",
                  "err": {},
                  "uuid": "ac2a69a3-4a49-4bf9-b08c-1bb6f5a73b1a",
                  "parentUUID": "9b794a7e-c1e5-4769-b96a-c7797736c6ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac2a69a3-4a49-4bf9-b08c-1bb6f5a73b1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "cfa36660-7408-4999-836a-60aa31b8d09c",
              "title": "loginUser",
              "fullFile": "/home/julcilea/Documentos/PGATS/pgats-02-api-aula/test/external-graphql/userGraphQL.test.js",
              "file": "/test/external-graphql/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo login inexistente recebo erro",
                  "fullTitle": "GraphQL User Mutations & Queries loginUser Quando informo login inexistente recebo erro",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n      }\n    }\n  `,\n  variables: {\n    username: 'jansen',\n    password: '126'\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.errors[0].message).to.equal('Usuário não encontrado');",
                  "err": {},
                  "uuid": "8a26c630-af7f-476d-9f70-95c1711da134",
                  "parentUUID": "cfa36660-7408-4999-836a-60aa31b8d09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válido recebo token",
                  "fullTitle": "GraphQL User Mutations & Queries loginUser Quando informo login válido recebo token",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mutation = {\n  query: `\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password) {\n        token\n        user {\n          username\n        }\n      }\n    }\n  `,\n  variables: {\n    username: 'julio',\n    password: '123456'\n  }\n};\nconst res = await request(app)\n  .post('/graphql')\n  .send(mutation);\nexpect(res.body.data.loginUser.token).to.exist;\ntoken = res.body.data.loginUser.token;",
                  "err": {},
                  "uuid": "d32b1a42-9135-4749-b0bd-8b29a9fcaab4",
                  "parentUUID": "cfa36660-7408-4999-836a-60aa31b8d09c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a26c630-af7f-476d-9f70-95c1711da134",
                "d32b1a42-9135-4749-b0bd-8b29a9fcaab4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e59ff937-148f-4d1b-9382-3ff641c6b99f",
              "title": "users Query",
              "fullFile": "/home/julcilea/Documentos/PGATS/pgats-02-api-aula/test/external-graphql/userGraphQL.test.js",
              "file": "/test/external-graphql/userGraphQL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios recebo lista",
                  "fullTitle": "GraphQL User Mutations & Queries users Query Quando solicito os dados de usuarios recebo lista",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const query = {\n  query: `\n    query {\n      users {\n        username\n        saldo\n        favorecidos\n      }\n    }\n  `\n};\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send(query);\nexpect(res.body.data.users).to.be.an('array');\nexpect(res.body.data.users[0]).to.have.property('username');",
                  "err": {},
                  "uuid": "7f3877cf-8a90-4718-98f2-a435e51974d8",
                  "parentUUID": "e59ff937-148f-4d1b-9382-3ff641c6b99f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f3877cf-8a90-4718-98f2-a435e51974d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-graphql",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report-graphql",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}