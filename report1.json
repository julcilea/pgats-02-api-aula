{
  "stats": {
    "suites": 7,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T19:01:00.028Z",
    "end": "2025-09-06T19:01:00.296Z",
    "duration": 268,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "389d4bf9-e110-426f-afd4-b40337c5e167",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fdae3cc8-4cb4-46c2-8020-9fa4d784f7cc",
          "title": "Transfer Controller",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/transferController.test.js",
          "file": "/test/rest/controller/transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
              "title": "POST /transfers",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/transferController.test.js",
              "file": "/test/rest/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar o Token\nconst respostaLogin = await request(app)\n    .post('/users/login')\n    .send({\n        username: 'julio',\n        password: '123456'\n    });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "cdbd7dd0-5a30-4deb-85e0-53eeaac4bfcc",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"after each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reseto o Mock\nsinon.restore();",
                  "err": {},
                  "uuid": "46436340-c6e9-47d9-b8c4-c6b04653b25a",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"juliana\",\n        to: \"maria\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "1c577358-53d0-46a4-b41b-7125a0bc1eea",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(new Error('Usuário remetente ou destinatário não encontrado'));\nconst resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "f089f784-9ccb-4190-ac91-bf350e847983",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({\n    from: \"julio\",\n    to: \"priscila\",\n    value: 100,\n    date: new Date().toISOString()\n});\nconst resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscilaaaaaaaaaaa\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(201);\n// Validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/quandoInformoValoresValidosEuTenhoSucessoCom201Created.json')\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);\n// Um expect para comparar a Resposta.body com a String contida no arquivo\n// expect(resposta.body).to.have.property('from', 'julio');\n// expect(resposta.body).to.have.property('to', 'priscila');\n// expect(resposta.body).to.have.property('value', 100);",
                  "err": {},
                  "uuid": "95f61636-4348-473c-bba9-b62c935a1891",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transferência acima de R$ 5.000,00 para não favorecido deve falhar (400)",
                  "fullTitle": "Transfer Controller POST /transfers Transferência acima de R$ 5.000,00 para não favorecido deve falhar (400)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"renata\",\n        value: 5000.01\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Transferência acima de R$ 5.000,00 só para favorecidos');",
                  "err": {},
                  "uuid": "c0590ba1-ecf1-4547-b5a8-1942257e322f",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transferência acima de R$ 5.000,00 para favorecido deve ter sucesso (201)",
                  "fullTitle": "Transfer Controller POST /transfers Transferência acima de R$ 5.000,00 para favorecido deve ter sucesso (201)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 5000.01\n    });\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'julio');\nexpect(resposta.body).to.have.property('to', 'priscila');\nexpect(resposta.body).to.have.property('value', 5000.01);",
                  "err": {},
                  "uuid": "fb2654f3-8aef-42ac-aae3-f7c253aacc12",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transferência com valor maior que o saldo deve falhar (400)",
                  "fullTitle": "Transfer Controller POST /transfers Transferência com valor maior que o saldo deve falhar (400)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 10000.01 // saldo insuficiente\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "ae7f2bbf-2866-4b27-9acd-85769c1b7386",
                  "parentUUID": "2ba9d73e-bf7b-495e-a9ff-f7c817671373",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c577358-53d0-46a4-b41b-7125a0bc1eea",
                "f089f784-9ccb-4190-ac91-bf350e847983",
                "95f61636-4348-473c-bba9-b62c935a1891",
                "c0590ba1-ecf1-4547-b5a8-1942257e322f",
                "fb2654f3-8aef-42ac-aae3-f7c253aacc12",
                "ae7f2bbf-2866-4b27-9acd-85769c1b7386"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a74d2c6f-29a0-404c-b102-962201c7ee7d",
              "title": "GET /transfers",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/transferController.test.js",
              "file": "/test/rest/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /transfers\"",
                  "fullTitle": "Transfer Controller GET /transfers \"before each\" hook in \"GET /transfers\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar o Token\nconst respostaLogin = await request(app)\n    .post('/users/login')\n    .send({\n        username: 'julio',\n        password: '123456'\n    });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "c39e8ff7-1f3e-4575-aee3-4e108547aa3c",
                  "parentUUID": "a74d2c6f-29a0-404c-b102-962201c7ee7d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando solicito as transferências tenho sucesso com 200",
                  "fullTitle": "Transfer Controller GET /transfers Quando solicito as transferências tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .get('/transfers')\n    .set('Authorization', `Bearer ${token}`);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.be.an('array');",
                  "err": {},
                  "uuid": "e4c7602f-7089-418c-82bc-6e87eb128249",
                  "parentUUID": "a74d2c6f-29a0-404c-b102-962201c7ee7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4c7602f-7089-418c-82bc-6e87eb128249"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a07eabd6-dce5-492f-8a87-203c1bbeb999",
          "title": "User Controller",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
          "file": "/test/rest/controller/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e335a131-b275-454f-800e-5c9da0cdd0bb",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
              "file": "/test/rest/controller/userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /users/register\"",
                  "fullTitle": "User Controller POST /users/register \"before each\" hook in \"POST /users/register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userModel.users.length = 0; // Limpa o array atual\nuserModel.users.push(...JSON.parse(JSON.stringify(originalUsers))); // Restaura os dados originais",
                  "err": {},
                  "uuid": "d792debe-2c19-41a9-a636-0977e630ed7a",
                  "parentUUID": "e335a131-b275-454f-800e-5c9da0cdd0bb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /users/register\"",
                  "fullTitle": "User Controller POST /users/register \"after each\" hook in \"POST /users/register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "476e0abe-4383-4e97-ad80-36087dd56ad0",
                  "parentUUID": "e335a131-b275-454f-800e-5c9da0cdd0bb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo usuario inexistentes recebo 400",
                  "fullTitle": "User Controller POST /users/register Quando informo usuario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/register')\n    .send({\n        username: \"julio\",\n        password: \"123456\",\n        favorecidos: [\"priscila\"]\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário já existe')",
                  "err": {},
                  "uuid": "d1986f2b-1e18-4c53-b2e7-4395effdc837",
                  "parentUUID": "e335a131-b275-454f-800e-5c9da0cdd0bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo valores válidos de usuários eu tenho sucesso com 201 CREATED",
                  "fullTitle": "User Controller POST /users/register Quando informo valores válidos de usuários eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/register')\n    .send({\n        username: \"julcilea\",\n        password: \"123456\",\n        favorecidos: [\"renata\"]\n    });\nexpect(resposta.status).to.equal(201);\nconst usuarioCriado = require('../fixture/respostas/quandoInformoValoresValidosUsuariosEuTenhoSucesso201Created.json');\nexpect(resposta.body).to.deep.equal(usuarioCriado);",
                  "err": {},
                  "uuid": "680216e6-969c-4d8b-8a12-542463930156",
                  "parentUUID": "e335a131-b275-454f-800e-5c9da0cdd0bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1986f2b-1e18-4c53-b2e7-4395effdc837",
                "680216e6-969c-4d8b-8a12-542463930156"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "10ed79c9-7750-4f57-ae18-646645217b2d",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
              "file": "/test/rest/controller/userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before each\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userModel.users.length = 0; // Limpa o array atual\nuserModel.users.push(...JSON.parse(JSON.stringify(originalUsers))); // Restaura os dados originais",
                  "err": {},
                  "uuid": "faad5014-dbc2-4db0-bab0-e44ab53def43",
                  "parentUUID": "10ed79c9-7750-4f57-ae18-646645217b2d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"after each\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "dbffc708-e5ff-4966-8550-fdfe61117571",
                  "parentUUID": "10ed79c9-7750-4f57-ae18-646645217b2d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo login inexistentes recebo 400",
                  "fullTitle": "User Controller POST /users/login Quando informo login inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/login')\n    .send({\n        username: \"maria\",\n        password: \"123456\"\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário não encontrado')",
                  "err": {},
                  "uuid": "ac6ecbd1-95fc-41da-81cb-5fa85d655189",
                  "parentUUID": "10ed79c9-7750-4f57-ae18-646645217b2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válidos tenho sucesso com 200",
                  "fullTitle": "User Controller POST /users/login Quando informo login válidos tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/login')\n    .send({\n        username: \"julio\",\n        password: \"123456\"\n    });\nexpect(resposta.status).to.equal(200);\nconst respostaLogin = require('../fixture/respostas/quandoInformoLoginValidoTenhoSucesso200.json');\ndelete resposta.body.token;\ndelete respostaLogin.token;\nexpect(resposta.body).to.deep.equal(respostaLogin);",
                  "err": {},
                  "uuid": "cabf03dd-1700-48e5-99af-4a5c7a3eacb3",
                  "parentUUID": "10ed79c9-7750-4f57-ae18-646645217b2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac6ecbd1-95fc-41da-81cb-5fa85d655189",
                "cabf03dd-1700-48e5-99af-4a5c7a3eacb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d6674bb9-ee7e-4e4a-8f50-de0fb222bc67",
              "title": "GET /users",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
              "file": "/test/rest/controller/userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /users\"",
                  "fullTitle": "User Controller GET /users \"before each\" hook in \"GET /users\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userModel.users.length = 0; // Limpa o array atual\nuserModel.users.push(...JSON.parse(JSON.stringify(originalUsers))); // Restaura os dados originais",
                  "err": {},
                  "uuid": "b521407a-643d-4835-8873-39af2734bbd2",
                  "parentUUID": "d6674bb9-ee7e-4e4a-8f50-de0fb222bc67",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"GET /users\"",
                  "fullTitle": "User Controller GET /users \"after each\" hook in \"GET /users\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "9f563d2f-c373-4dad-a5ff-809653bf3140",
                  "parentUUID": "d6674bb9-ee7e-4e4a-8f50-de0fb222bc67",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios tenho sucesso com 200",
                  "fullTitle": "User Controller GET /users Quando solicito os dados de usuarios tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .get('/users')\n    .send();\nexpect(resposta.status).to.equal(200);\nconst respostaCadastro = require('../fixture/respostas/quandoSolicitoDadosDosUsuariosEuTenhoSucesso200.json');\nexpect(resposta.body).to.deep.equal(respostaCadastro);",
                  "err": {},
                  "uuid": "1ab8954e-4cd9-4d74-b5c9-3a7d36142cb1",
                  "parentUUID": "d6674bb9-ee7e-4e4a-8f50-de0fb222bc67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ab8954e-4cd9-4d74-b5c9-3a7d36142cb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report1",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report1",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}