{
  "stats": {
    "suites": 6,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-23T21:11:29.786Z",
    "end": "2025-08-23T21:11:29.952Z",
    "duration": 166,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fdb26745-be63-4760-97bd-7bee4ed26ed9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "106a30ae-c415-45f8-9e77-af76764d8994",
          "title": "Transfer Controller",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/controller/transferController.test.js",
          "file": "/test/controller/transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "754a49c2-dd87-4a85-a44d-21ef78d421e7",
              "title": "POST /transfers",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/controller/transferController.test.js",
              "file": "/test/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar o Token\nconst respostaLogin = await request(app)\n    .post('/users/login')\n    .send({\n        username: 'julio',\n        password: '123456'\n        });\n        \n        token = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "d481a9a2-c171-41ed-968f-dd187bdffe88",
                  "parentUUID": "754a49c2-dd87-4a85-a44d-21ef78d421e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"after each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reseto o Mock\nsinon.restore();",
                  "err": {},
                  "uuid": "13597ed3-d50e-4151-88d7-86c559c390c8",
                  "parentUUID": "754a49c2-dd87-4a85-a44d-21ef78d421e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"juliana\",\n        to: \"maria\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "c043caf8-e662-4a8c-a6e9-7c54de76b02f",
                  "parentUUID": "754a49c2-dd87-4a85-a44d-21ef78d421e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(new Error('Usuário remetente ou destinatário não encontrado'));\nconst resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "c2fa67bc-5149-4376-8d57-662067bb10b4",
                  "parentUUID": "754a49c2-dd87-4a85-a44d-21ef78d421e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({ \n    from: \"julio\", \n    to: \"priscila\", \n    value: 100, \n    date: new Date().toISOString() \n});\nconst resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscilaaaaaaaaaaa\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(201);\n\n// Validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/quandoInformoValoresValidosEuTenhoSucessoCom201Created.json')\ndelete resposta.body.date;\ndelete respostaEsperada.date; \nexpect(resposta.body).to.deep.equal(respostaEsperada);\n// Um expect para comparar a Resposta.body com a String contida no arquivo\n// expect(resposta.body).to.have.property('from', 'julio');\n// expect(resposta.body).to.have.property('to', 'priscila');\n// expect(resposta.body).to.have.property('value', 100);",
                  "err": {},
                  "uuid": "497c9528-532c-4a9f-ad16-44170c22e519",
                  "parentUUID": "754a49c2-dd87-4a85-a44d-21ef78d421e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c043caf8-e662-4a8c-a6e9-7c54de76b02f",
                "c2fa67bc-5149-4376-8d57-662067bb10b4",
                "497c9528-532c-4a9f-ad16-44170c22e519"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a6bda797-3db4-48d8-b785-05c1caf5339b",
          "title": "User Controller",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/controller/userController.test.js",
          "file": "/test/controller/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b9b7214-124b-4807-a117-fc970dee9e6e",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/controller/userController.test.js",
              "file": "/test/controller/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /users/register\"",
                  "fullTitle": "User Controller POST /users/register \"after each\" hook in \"POST /users/register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "565a1e35-c0cb-4497-8b7e-16a3766f1c85",
                  "parentUUID": "2b9b7214-124b-4807-a117-fc970dee9e6e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo usuario inexistentes recebo 400",
                  "fullTitle": "User Controller POST /users/register Quando informo usuario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/register')\n    .send({\n        username: \"julio\",\n        password: \"123456\",\n        favorecidos: [\"priscila\"]\n});\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário já existe')",
                  "err": {},
                  "uuid": "13d205cf-9062-4008-8077-ff97bcecdd52",
                  "parentUUID": "2b9b7214-124b-4807-a117-fc970dee9e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo valores válidos de usuários eu tenho sucesso com 201 CREATED",
                  "fullTitle": "User Controller POST /users/register Quando informo valores válidos de usuários eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/register')\n    .send({\n        username: \"julcilea\",\n        password: \"123456\",\n        favorecidos: [\"renata\"]\n});\n\nexpect(resposta.status).to.equal(201);\nconst usuarioCriado = require('../fixture/respostas/quandoInformoValoresValidosUsuariosEuTenhoSucesso201Created.json');\nexpect(resposta.body).to.deep.equal(usuarioCriado);",
                  "err": {},
                  "uuid": "1f85ac21-3652-4f4b-bb79-7156c3b20f7f",
                  "parentUUID": "2b9b7214-124b-4807-a117-fc970dee9e6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13d205cf-9062-4008-8077-ff97bcecdd52",
                "1f85ac21-3652-4f4b-bb79-7156c3b20f7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4a10ae1f-1dfa-4330-bcfd-4543bc449c07",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/controller/userController.test.js",
              "file": "/test/controller/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"after each\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "d379d862-3de8-47f1-a673-e4caf5af6b10",
                  "parentUUID": "4a10ae1f-1dfa-4330-bcfd-4543bc449c07",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo login inexistentes recebo 400",
                  "fullTitle": "User Controller POST /users/login Quando informo login inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/login')\n    .send({\n        username: \"maria\",\n        password: \"123456\"\n});\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário não encontrado')",
                  "err": {},
                  "uuid": "e766f6ce-f658-4725-a05e-b4506eb43d86",
                  "parentUUID": "4a10ae1f-1dfa-4330-bcfd-4543bc449c07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válidos tenho sucesso com 200",
                  "fullTitle": "User Controller POST /users/login Quando informo login válidos tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/login')\n    .send({\n        username: \"julio\",\n        password: \"123456\"\n});\nexpect(resposta.status).to.equal(200);\nconst respostaLogin = require('../fixture/respostas/quandoInformoLoginValidoTenhoSucesso200.json');\ndelete resposta.body.token;\ndelete respostaLogin.token;\nexpect(resposta.body).to.deep.equal(respostaLogin);",
                  "err": {},
                  "uuid": "83650c2f-de6a-4533-a16c-8bce5126f5a4",
                  "parentUUID": "4a10ae1f-1dfa-4330-bcfd-4543bc449c07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e766f6ce-f658-4725-a05e-b4506eb43d86",
                "83650c2f-de6a-4533-a16c-8bce5126f5a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e9aaf9fe-2f4a-42fd-a7c3-4c3f4e1e776e",
              "title": "GET /users",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/controller/userController.test.js",
              "file": "/test/controller/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"GET /users\"",
                  "fullTitle": "User Controller GET /users \"after each\" hook in \"GET /users\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "89028a4e-7634-4b36-8577-b00966bea747",
                  "parentUUID": "e9aaf9fe-2f4a-42fd-a7c3-4c3f4e1e776e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios tenho sucesso com 200",
                  "fullTitle": "User Controller GET /users Quando solicito os dados de usuarios tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .get('/users')\n    .send();\nexpect(resposta.status).to.equal(200);\nconst respostaCadastro = require('../fixture/respostas/quandoSolicitoDadosDosUsuariosEuTenhoSucesso200.json');\nexpect(resposta.body).to.deep.equal(respostaCadastro);",
                  "err": {},
                  "uuid": "b2740578-6269-4447-800b-ded3bfc85ce8",
                  "parentUUID": "e9aaf9fe-2f4a-42fd-a7c3-4c3f4e1e776e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2740578-6269-4447-800b-ded3bfc85ce8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report1",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report1",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}