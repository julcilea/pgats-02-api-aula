{
  "stats": {
    "suites": 7,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T18:49:00.162Z",
    "end": "2025-09-06T18:49:00.440Z",
    "duration": 278,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f92f7781-b9a0-4a13-a697-1dedb90bf57d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "663e5a81-73c3-4b39-a2ce-d67528a019e0",
          "title": "Transfer Controller",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/transferController.test.js",
          "file": "/test/rest/controller/transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e772657-5202-4f71-b0c0-0f3e1b846672",
              "title": "POST /transfers",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/transferController.test.js",
              "file": "/test/rest/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar o Token\nconst respostaLogin = await request(app)\n    .post('/users/login')\n    .send({\n        username: 'julio',\n        password: '123456'\n    });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "9677bb6b-1d81-4a67-a3d3-14557eb0681b",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer Controller POST /transfers \"after each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reseto o Mock\nsinon.restore();",
                  "err": {},
                  "uuid": "cd816a94-24ea-434e-b965-61156d5f41ad",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"juliana\",\n        to: \"maria\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "d34c9402-94f5-4dad-90c5-e1e4cfa4dab1",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(new Error('Usuário remetente ou destinatário não encontrado'));\nconst resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "128ce850-aebb-4761-b821-2bb529054ead",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({\n    from: \"julio\",\n    to: \"priscila\",\n    value: 100,\n    date: new Date().toISOString()\n});\nconst resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscilaaaaaaaaaaa\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(201);\n// Validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/quandoInformoValoresValidosEuTenhoSucessoCom201Created.json')\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);\n// Um expect para comparar a Resposta.body com a String contida no arquivo\n// expect(resposta.body).to.have.property('from', 'julio');\n// expect(resposta.body).to.have.property('to', 'priscila');\n// expect(resposta.body).to.have.property('value', 100);",
                  "err": {},
                  "uuid": "137b457e-53c7-4be0-b6f1-a7d32133952e",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transferência acima de R$ 5.000,00 para não favorecido deve falhar (400)",
                  "fullTitle": "Transfer Controller POST /transfers Transferência acima de R$ 5.000,00 para não favorecido deve falhar (400)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"renata\",\n        value: 5000.01\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Transferência acima de R$ 5.000,00 só para favorecidos');",
                  "err": {},
                  "uuid": "60393a15-d5cd-46ba-8259-b4ad485aabff",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transferência acima de R$ 5.000,00 para favorecido deve ter sucesso (201)",
                  "fullTitle": "Transfer Controller POST /transfers Transferência acima de R$ 5.000,00 para favorecido deve ter sucesso (201)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 5000.01\n    });\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'julio');\nexpect(resposta.body).to.have.property('to', 'priscila');\nexpect(resposta.body).to.have.property('value', 5000.01);",
                  "err": {},
                  "uuid": "9b71d568-de42-42a5-b98a-4d9d965d79a7",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transferência com valor maior que o saldo deve falhar (400)",
                  "fullTitle": "Transfer Controller POST /transfers Transferência com valor maior que o saldo deve falhar (400)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 10000.01 // saldo insuficiente\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "b043680b-3666-484b-95bb-ae6eac18bd4b",
                  "parentUUID": "8e772657-5202-4f71-b0c0-0f3e1b846672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d34c9402-94f5-4dad-90c5-e1e4cfa4dab1",
                "128ce850-aebb-4761-b821-2bb529054ead",
                "137b457e-53c7-4be0-b6f1-a7d32133952e",
                "60393a15-d5cd-46ba-8259-b4ad485aabff",
                "9b71d568-de42-42a5-b98a-4d9d965d79a7",
                "b043680b-3666-484b-95bb-ae6eac18bd4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6d4b1e18-faad-4e42-b054-b2bcf2f4a46a",
              "title": "GET /transfers",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/transferController.test.js",
              "file": "/test/rest/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /transfers\"",
                  "fullTitle": "Transfer Controller GET /transfers \"before each\" hook in \"GET /transfers\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar o Token\nconst respostaLogin = await request(app)\n    .post('/users/login')\n    .send({\n        username: 'julio',\n        password: '123456'\n    });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "eb2b9ce7-5105-4af6-a63e-7326187b79cc",
                  "parentUUID": "6d4b1e18-faad-4e42-b054-b2bcf2f4a46a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando solicito as transferências tenho sucesso com 200",
                  "fullTitle": "Transfer Controller GET /transfers Quando solicito as transferências tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .get('/transfers')\n    .set('Authorization', `Bearer ${token}`);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.be.an('array');",
                  "err": {},
                  "uuid": "64a8ffdb-6e36-44c9-a31d-925dafb9dac0",
                  "parentUUID": "6d4b1e18-faad-4e42-b054-b2bcf2f4a46a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64a8ffdb-6e36-44c9-a31d-925dafb9dac0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3e0de3cf-37a8-4e14-bbb5-1d46e2cf2ed8",
          "title": "User Controller",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
          "file": "/test/rest/controller/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08a3caa0-ac22-4d18-a821-0c9627b1926f",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
              "file": "/test/rest/controller/userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /users/register\"",
                  "fullTitle": "User Controller POST /users/register \"before each\" hook in \"POST /users/register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userModel.users.length = 0; // Limpa o array atual\nuserModel.users.push(...JSON.parse(JSON.stringify(originalUsers))); // Restaura os dados originais",
                  "err": {},
                  "uuid": "ad4a918a-70f8-4bf6-aac9-9f877572836d",
                  "parentUUID": "08a3caa0-ac22-4d18-a821-0c9627b1926f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /users/register\"",
                  "fullTitle": "User Controller POST /users/register \"after each\" hook in \"POST /users/register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "2cf86a07-a139-48a7-8143-77bda434dc82",
                  "parentUUID": "08a3caa0-ac22-4d18-a821-0c9627b1926f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo usuario inexistentes recebo 400",
                  "fullTitle": "User Controller POST /users/register Quando informo usuario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/register')\n    .send({\n        username: \"julio\",\n        password: \"123456\",\n        favorecidos: [\"priscila\"]\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário já existe')",
                  "err": {},
                  "uuid": "fd02234c-e404-4f52-a31a-aa93db4ad9e8",
                  "parentUUID": "08a3caa0-ac22-4d18-a821-0c9627b1926f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo valores válidos de usuários eu tenho sucesso com 201 CREATED",
                  "fullTitle": "User Controller POST /users/register Quando informo valores válidos de usuários eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/register')\n    .send({\n        username: \"julcilea\",\n        password: \"123456\",\n        favorecidos: [\"renata\"]\n    });\nexpect(resposta.status).to.equal(201);\nconst usuarioCriado = require('../fixture/respostas/quandoInformoValoresValidosUsuariosEuTenhoSucesso201Created.json');\nexpect(resposta.body).to.deep.equal(usuarioCriado);",
                  "err": {},
                  "uuid": "cd475bdd-1400-43d2-8885-be4f5019c458",
                  "parentUUID": "08a3caa0-ac22-4d18-a821-0c9627b1926f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd02234c-e404-4f52-a31a-aa93db4ad9e8",
                "cd475bdd-1400-43d2-8885-be4f5019c458"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "17d0a1f7-b4a2-4825-a58a-be26ac35c65d",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
              "file": "/test/rest/controller/userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"before each\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userModel.users.length = 0; // Limpa o array atual\nuserModel.users.push(...JSON.parse(JSON.stringify(originalUsers))); // Restaura os dados originais",
                  "err": {},
                  "uuid": "34ada90c-2c7c-41e6-b889-b2620e94635a",
                  "parentUUID": "17d0a1f7-b4a2-4825-a58a-be26ac35c65d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /users/login\"",
                  "fullTitle": "User Controller POST /users/login \"after each\" hook in \"POST /users/login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "44a646c9-7320-48b8-b0a9-f6680f2332c8",
                  "parentUUID": "17d0a1f7-b4a2-4825-a58a-be26ac35c65d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo login inexistentes recebo 400",
                  "fullTitle": "User Controller POST /users/login Quando informo login inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/login')\n    .send({\n        username: \"maria\",\n        password: \"123456\"\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário não encontrado')",
                  "err": {},
                  "uuid": "c635c70c-c95a-41a1-9c94-45062ec03023",
                  "parentUUID": "17d0a1f7-b4a2-4825-a58a-be26ac35c65d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válidos tenho sucesso com 200",
                  "fullTitle": "User Controller POST /users/login Quando informo login válidos tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/users/login')\n    .send({\n        username: \"julio\",\n        password: \"123456\"\n    });\nexpect(resposta.status).to.equal(200);\nconst respostaLogin = require('../fixture/respostas/quandoInformoLoginValidoTenhoSucesso200.json');\ndelete resposta.body.token;\ndelete respostaLogin.token;\nexpect(resposta.body).to.deep.equal(respostaLogin);",
                  "err": {},
                  "uuid": "8cdb4b3a-55e9-444b-be16-d1b30ca73097",
                  "parentUUID": "17d0a1f7-b4a2-4825-a58a-be26ac35c65d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c635c70c-c95a-41a1-9c94-45062ec03023",
                "8cdb4b3a-55e9-444b-be16-d1b30ca73097"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e8874cce-89be-43b6-8bcb-24f29c895d80",
              "title": "GET /users",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/rest/controller/userController.test.js",
              "file": "/test/rest/controller/userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /users\"",
                  "fullTitle": "User Controller GET /users \"before each\" hook in \"GET /users\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userModel.users.length = 0; // Limpa o array atual\nuserModel.users.push(...JSON.parse(JSON.stringify(originalUsers))); // Restaura os dados originais",
                  "err": {},
                  "uuid": "cb6f2c01-0885-4fb2-a0b6-ee9c908bcc9a",
                  "parentUUID": "e8874cce-89be-43b6-8bcb-24f29c895d80",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"GET /users\"",
                  "fullTitle": "User Controller GET /users \"after each\" hook in \"GET /users\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "6640e4fe-4eb3-455e-a6d0-289d50ff5697",
                  "parentUUID": "e8874cce-89be-43b6-8bcb-24f29c895d80",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios tenho sucesso com 200",
                  "fullTitle": "User Controller GET /users Quando solicito os dados de usuarios tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .get('/users')\n    .send();\nexpect(resposta.status).to.equal(200);\nconst respostaCadastro = require('../fixture/respostas/quandoSolicitoDadosDosUsuariosEuTenhoSucesso200.json');\nexpect(resposta.body).to.deep.equal(respostaCadastro);",
                  "err": {},
                  "uuid": "f24ecb28-b380-4d3f-b412-bd6104cebd74",
                  "parentUUID": "e8874cce-89be-43b6-8bcb-24f29c895d80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f24ecb28-b380-4d3f-b412-bd6104cebd74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report1",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report1",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}