{
  "stats": {
    "suites": 6,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T14:12:14.792Z",
    "end": "2025-09-06T14:12:14.937Z",
    "duration": 145,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3ca4d148-9cf8-4373-a653-b67e935a834f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c797f0c9-3b3e-4618-92fa-9aa1b41f3f85",
          "title": "Transfer external",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/external/transferExternal.test.js",
          "file": "/test/external/transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c381f15e-3b3b-4d14-ac31-ec3f092e859f",
              "title": "POST /transfers",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/external/transferExternal.test.js",
              "file": "/test/external/transferExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfers\"",
                  "fullTitle": "Transfer external POST /transfers \"before each\" hook in \"POST /transfers\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar o Token\nconst respostaLogin = await request('http://localhost:3000')\n    .post('/users/login')\n    .send({\n        username: 'julio',\n        password: '123456'\n        });\n\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "c8a3c714-f838-4efb-ab62-bb59a6d3f9d9",
                  "parentUUID": "c381f15e-3b3b-4d14-ac31-ec3f092e859f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer external POST /transfers Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 2) Realizar a Transferência\n           const resposta = await request('http://localhost:3000')\n               .post('/transfers')\n               .set('Authorization', `Bearer ${token}`)\n               .send({\n                   from: \"julio\",\n                   to: \"isabelle\",\n                   value: 100\n           });\n           \n           expect(resposta.status).to.equal(400);\n           expect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {},
                  "uuid": "9d88c21b-7dc6-4467-ba53-34073d0d7246",
                  "parentUUID": "c381f15e-3b3b-4d14-ac31-ec3f092e859f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer external POST /transfers Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"jose\",\n        to: \"isabelle\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "81dba764-4fa1-48d9-8563-f075f2f6bf46",
                  "parentUUID": "c381f15e-3b3b-4d14-ac31-ec3f092e859f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer external POST /transfers Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n    .post('/transfers')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\nexpect(resposta.status).to.equal(201);\n\n// Validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/quandoInformoValoresValidosEuTenhoSucessoCom201Created.json')\ndelete resposta.body.date;\ndelete respostaEsperada.date; \nexpect(resposta.body).to.deep.equal(respostaEsperada);",
                  "err": {},
                  "uuid": "3c22e167-4f08-4e4a-aa0e-1ebdb6c6c7dc",
                  "parentUUID": "c381f15e-3b3b-4d14-ac31-ec3f092e859f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d88c21b-7dc6-4467-ba53-34073d0d7246",
                "81dba764-4fa1-48d9-8563-f075f2f6bf46",
                "3c22e167-4f08-4e4a-aa0e-1ebdb6c6c7dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fc4ac079-955f-4e22-93c4-8b822deef8fa",
          "title": "User external",
          "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/external/userExternal.test.js",
          "file": "/test/external/userExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "76b3a4d3-2b0d-49f6-a0f1-48c5213bdc6b",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/external/userExternal.test.js",
              "file": "/test/external/userExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo usuario inexistentes recebo 400",
                  "fullTitle": "User external POST /users/register Quando informo usuario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/users/register')\n    .send({\n        username: \"julio\",\n        password: \"123456\",\n        favorecidos: [\"camila\"]\n});\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário já existe')",
                  "err": {},
                  "uuid": "be3c6e86-84d9-44d4-9ba8-c38505881575",
                  "parentUUID": "76b3a4d3-2b0d-49f6-a0f1-48c5213bdc6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be3c6e86-84d9-44d4-9ba8-c38505881575"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6b18792b-b353-45dd-a9ed-6473c4d91849",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/external/userExternal.test.js",
              "file": "/test/external/userExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo login inexistentes recebo 400",
                  "fullTitle": "User external POST /users/login Quando informo login inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/users/login')\n    .send({\n        username: \"jansen\",\n        password: \"126\"\n});\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário não encontrado')",
                  "err": {},
                  "uuid": "b045f9c6-b9f3-4860-b49e-cb399a3c61a6",
                  "parentUUID": "6b18792b-b353-45dd-a9ed-6473c4d91849",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo login válidos tenho sucesso com 200",
                  "fullTitle": "User external POST /users/login Quando informo login válidos tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/users/login')\n    .send({\n        username: \"julio\",\n        password: \"123456\"\n});\nexpect(resposta.status).to.equal(200);",
                  "err": {},
                  "uuid": "0cbeab78-2f0f-41d7-9ce1-6525cce3f222",
                  "parentUUID": "6b18792b-b353-45dd-a9ed-6473c4d91849",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b045f9c6-b9f3-4860-b49e-cb399a3c61a6",
                "0cbeab78-2f0f-41d7-9ce1-6525cce3f222"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "50e85a38-164f-4f52-ab06-4dfe330ae604",
              "title": "GET /users",
              "fullFile": "/home/runner/work/pgats-02-api-aula/pgats-02-api-aula/test/external/userExternal.test.js",
              "file": "/test/external/userExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando solicito os dados de usuarios tenho sucesso com 200",
                  "fullTitle": "User external GET /users Quando solicito os dados de usuarios tenho sucesso com 200",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .get('/users')\n    .send();\nexpect(resposta.status).to.equal(200);",
                  "err": {},
                  "uuid": "d8767b27-8586-4bd6-bb4c-0150a1d2720f",
                  "parentUUID": "50e85a38-164f-4f52-ab06-4dfe330ae604",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8767b27-8586-4bd6-bb4c-0150a1d2720f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}